<?php

/**
 * @file
 * Contains brms_common.module.
 */

use Drupal\brms_common\NaturalBoundaryLength;
use Drupal\brms_common\TotalBoundaryLength;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_base_field_info().
 */
function brms_common_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === "node") {
    $fields['natural_boundary_length'] = BaseFieldDefinition::create('decimal')
      ->setName('natural_boundary_length')
      ->setLabel(t('Natural boundary length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings(['suffix' => 'km'])
      ->setClass(NaturalBoundaryLength::class);

    $fields['total_boundary_length'] = BaseFieldDefinition::create('decimal')
      ->setName('total_boundary_length')
      ->setLabel(t('Total boundary length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings(['suffix' => 'km'])
      ->setClass(TotalBoundaryLength::class);
  }
  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function brms_common_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Make fields read-only for all except administrator role.
  if (!\Drupal::currentUser()->hasPermission('edit nfa readonly field')) {
    switch ($form_id) {
      case 'node_forest_reserve_edit_form':
        $form['title']['#disabled'] = TRUE;
        $form['forest_reserve_type']['#disabled'] = TRUE;
        $form['gazetted_area']['#disabled'] = TRUE;
        $form['gazetted_area_2']['#disabled'] = TRUE;
        break;
      default:
        break;
    }
  }
  // NFA global id is always read-only.
  if ($form_id == 'node_forest_reserve_edit_form') {
    $form['nfa_sites_global_id']['#disabled'] = TRUE;
  }

}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function brms_common_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Make sure the NFA global id is unique.
  if ($entity_type->id() === 'node' && $bundle === 'forest_reserve') {
    if (isset($fields['nfa_sites_global_id'])) {
      $fields['nfa_sites_global_id']->addConstraint('UniqueField');
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function brms_common_views_pre_render(ViewExecutable $view) {
  // Render a map attachment above the forest reserves views.
  if ($view->id() == 'forest_reserves') {
    $map_settings = [];

    // Pass the same exposed filters to the geojson view.
    $exposed_filters = $view->getExposedInput();

    // Add a layer for all layer types by passing the type term id to the map
    // settings.
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
      ->loadTree('layer_type', 0, NULL, TRUE);

    if ($terms) {
      $layer_types = [];
      foreach ($terms as $term) {
        /** @var \Drupal\taxonomy\Entity\term $term */
        if ($term->layer_group->value == 'feature') {
          $layer_types[] = [
            'url' => 'geolayer/geojson/layertype/' . $term->id(),
            'label' => $term->getName(),
            'group' => t('Forest reserve features'),
          ];
        }
        elseif ($term->layer_group->value == 'survey') {
          $layer_types[] = [
            'url' => 'survey/geolayer/geojson/layertype/' . $term->id(),
            'label' => $term->getName(),
            'group' => t('Forest reserve surveys'),
          ];
        }
      }

      $map_settings = [
        'layer_types' => $layer_types,
        'filters' => $exposed_filters,
      ];
    }

    // Add the base map layers.
    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $entity_ids = $storage->getQuery()
      ->condition('type', 'map_base_layer')
      ->condition('status', TRUE)
      ->condition('common_base_layer', TRUE)
      ->accessCheck(TRUE)
      ->execute();
    $entities = $storage->loadMultiple($entity_ids);
    foreach ($entities as $entity) {
      $base_map_urls[] = [
        'url' => 'baselayer/geojson/' . $entity->id(),
        'layer_name' => $entity->getTitle(),
      ];
    }
    $map_settings['base_map_urls'] = $base_map_urls ?? NULL;

    // Build the map render array.
    $map = [
      '#type' => 'geolayer_map',
      '#map_type' => 'default',
      '#map_settings' => $map_settings,
      '#behaviors' => [
        'geojson_layer_type',
        'geojson_basemaps',
        'popup',
      ],
    ];

    // Render the map.
    $view->attachment_before['forest_reserves_map'] = $map;
  }
}
